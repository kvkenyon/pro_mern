{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","connect","then","connection","listen","console","log","catch","error","get","req","res","collection","find","toArray","issues","metadata","total_count","length","_metadata","records","err","status","message","post","newIssue","body","created","Date","validateIssue","insertOne","result","_id","insertedId"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,2BAAiBA,OAAjB;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA,IAAIC,EAAJ;;AAEA,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwDC,IAAxD,CAA8DC,UAAD,IAAgB;AAC3EH,OAAKG,UAAL;AACAP,MAAIQ,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBC,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGC,KALH,CAKUC,KAAD,IAAW;AAClBH,UAAQC,GAAR,CAAY,OAAZ,EAAqBE,KAArB;AACD,CAPD;;AASAZ,IAAIa,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnCX,KAAGY,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCZ,IAAzC,CAA+Ca,MAAD,IAAY;AACxD,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAP,QAAIZ,IAAJ,CAAS,EAAEoB,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACD,GAHD,EAICR,KAJD,CAIQc,GAAD,IAAS;AACdhB,YAAQC,GAAR,CAAY,QAAZ,EAAsBe,GAAtB;AACAV,QAAIW,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqB,EAAEwB,SAAU,yBAAwBF,GAAI,EAAxC,EAArB;AACD,GAPD;AAQD,CATD;;AAWAzB,IAAI4B,IAAJ,CAAS,aAAT,EAAwB,CAACd,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMc,WAAWf,IAAIgB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASH,MAAd,EAAsB;AACpBG,aAASH,MAAT,GAAkB,KAAlB;AACD;AACD,QAAMD,MAAM,gBAAMQ,aAAN,CAAoBJ,QAApB,CAAZ;;AAEA,MAAIJ,GAAJ,EAAS;AACPV,QAAIW,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqB,EAAEwB,SAAU,oBAAmBF,GAAI,EAAnC,EAArB;AACA;AACD;;AAEDrB,KAAGY,UAAH,CAAc,QAAd,EAAwBkB,SAAxB,CAAkCL,QAAlC,EAA4CvB,IAA5C,CAAkD6B,MAAD,IAAY;AAC3DN,aAASO,GAAT,GAAeD,OAAOE,UAAtB;AACAtB,QAAIZ,IAAJ,CAAS0B,QAAT;AACD,GAHD,EAIClB,KAJD,CAIQC,KAAD,IAAW;AAChBH,YAAQC,GAAR,CAAYE,KAAZ;AACAG,QAAIW,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqB,EAAEwB,SAAU,0BAAyBf,KAAM,EAA3C,EAArB;AACD,GAPD;AAQD,CArBD","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport SourceMapSupport from 'source-map-support';\nimport Issue from './issue';\n\nSourceMapSupport.install();\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\n\nMongoClient.connect('mongodb://localhost/issuetracker').then((connection) => {\n  db = connection;\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n}).catch((error) => {\n  console.log('ERROR', error);\n});\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then((issues) => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues });\n  })\n  .catch((err) => {\n    console.log('ERROR:', err);\n    res.status(500).json({ message: `Internal Server Error:${err}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n  const err = Issue.validateIssue(newIssue);\n\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(newIssue).then((result) => {\n    newIssue._id = result.insertedId;\n    res.json(newIssue);\n  })\n  .catch((error) => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n"]}